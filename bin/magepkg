#!/usr/bin/env php
<?php

// Make sure the script was invoked via CLI.
if (PHP_SAPI != 'cli') {
    echo 'Warning: Magento Packager must be invoked via the CLI version of PHP.' . PHP_EOL;
    exit(1);
}

// Find the autoloader.
$relativePaths = [
    // Path when testing from git clone.
    '../vendor/autoload.php',
    // Path when installed with Composer.
    '../../../autoload.php',
];
$loaded = false;
foreach ($relativePaths as $path) {
    if (is_file($filename = __DIR__ . "/{$path}")) {
        require $filename;
        $loaded = true;
        break;
    }
}

// Check if requiring the autoloader succeeded.
if (!$loaded) {
    echo 'Error: Magento Packager not installed correctly.' . PHP_EOL;
    exit(1);
}

use AmeenRoss\MagentoPackager\Packager;

// Arguments only used for adding metadata.
$metadataArguments = [
    'notes',
    'version',
];

// Process CLI arguments.
$arguments = getopt('i:o:', array_merge([
    'config:',
], array_map(
    function ($item) {
        return "{$item}:";
    },
    $metadataArguments
)));

// Defaults for missing arguments.
$arguments += [
    'i' => '-',
    'o' => './',
    'config' => 'magepkg.xml',
];

// Check input file. When `-`, was given, use STDIN.
$input = ($arguments['i'] == '-') ? 'php://stdin' : $arguments['i'];

// Check that STDIN is not a TTY.
if (posix_isatty($input)) {
    echo "Error: can't use a TTY as input. Please pipe a raw tarball." . PHP_EOL;
    exit(1);
}

// Get default metadata from the config file, if it exists.
if (file_exists($arguments['config'])) {
    $metadata = new SimpleXMLElement($arguments['config'], 0, true);
}

// Create packager instance.
$packager = new Packager($input, $arguments['o'], @$metadata);

// Set metadata CLI options as the package metadata.
foreach (array_intersect_key($arguments, array_flip($metadataArguments)) as $argument => $value) {
    $packager->addMetadata($argument, $value);
}

// Create the package file.
$packager->save();
