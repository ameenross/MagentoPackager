#!/usr/bin/env php
<?php

// Make sure the script was invoked via CLI.
if (PHP_SAPI != 'cli') {
    echo 'Warning: Magento Packager must be invoked via the CLI version of PHP.' . PHP_EOL;
    exit(1);
}

// Find the autoloader.
$relativePaths = [
    // Path when testing from git clone.
    '../vendor/autoload.php',
    // Path when installed with Composer.
    '../../../autoload.php',
];
$loaded = false;
foreach ($relativePaths as $path) {
    if (is_file($filename = __DIR__ . "/{$path}")) {
        require $filename;
        $loaded = true;
        break;
    }
}

// Check if requiring the autoloader succeeded.
if (!$loaded) {
    echo 'Error: Magento Packager not installed correctly.' . PHP_EOL;
    exit(1);
}

use AmeenRoss\MagentoPackager\Packager;

// Check if input file was given.
if (empty($argv[1])) {
    echo 'Error: missing input filename.' . PHP_EOL;
    exit(1);
} else {
    // Use STDIN when `-` was given as filename.
    $input = ($argv[1] == '-') ? 'php://stdin' : $argv[1];
}

// Check that STDIN is not a TTY.
if (posix_isatty($input)) {
    echo "Error: can't use a TTY as input. Please pipe a raw tarball." . PHP_EOL;
    exit(1);
}

// Create packager instance.
$packager = new Packager($input);

// Get default metadata from magepkg.xml file, if it exists.
if (file_exists('magepkg.xml')) {
    $$packager->setMetadata(new SimpleXMLElement('magepkg.xml', 0, true));
}
